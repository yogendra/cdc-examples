# curl -o docker-compose.yml -sSL https://raw.githubusercontent.com/yogendra/cdc-examples/main/cdc-quickstart-kafka-connect/docker-compose.v2.yaml
# docker compose down -v --remove-orphans
# docker compose up -d
# docker compose logs -f cdc-setup
---
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:${KAFKA_VERSION}
    hostname: zookeeper
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      KAFKA_OPTS: -Dzookeeper.4lw.commands.whitelist=*
    volumes:
      - zk-data:/var/lib/zookeeper/data
      - zk-log:/var/lib/zookeeper/log

  broker:
    image: confluentinc/cp-server:${KAFKA_VERSION}
    hostname: broker
    container_name: broker
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost

    volumes:
      - k-data:/var/lib/kafka/data

  schema-registry:
    image: confluentinc/cp-schema-registry:${KAFKA_VERSION}
    hostname: schema-registry
    container_name: schema-registry
    restart: always
    depends_on:
      - broker
    ports:
      - "8081:8081"
      - "39999:39999"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: broker:9092
      SCHEMA_REGISTRY_JMX_PORT: 39999
      SCHEMA_REGISTRY_JMX_HOSTNAME: schema-registry
      SCHEMA_REGISTRY_JMX_OPTS: "-Dcom.sun.management.jmxremote.rmi.port=39999 -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=schema-registry"

  kafka-connect:
    image: quay.io/yugabyte/debezium-connector:latest
    platform: linux/amd64
    container_name: kafka-connect
    hostname: kafka-connect
    depends_on:
      - zookeeper
      - broker
    ports:
      - 8083:8083
      - 9876:9876
    restart: unless-stopped
    environment:
      BOOTSTRAP_SERVERS: "broker:9092"
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: kafka-connect_configs
      OFFSET_STORAGE_TOPIC: kafka-connect_offset
      STATUS_STORAGE_TOPIC: kafka-connect_status
      HOST_NAME: "0.0.0.0"
      REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_REST_PORT: 8083
      KAFKA_JMX_PORT: '9876'
      KAFKA_OPTS: "-javaagent:/kafka/etc/jmx_prometheus_javaagent-0.17.2.jar=9876:/etc/jmx-exporter/metrics.yml"

  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:${KAFKA_VERSION}
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - broker
      - kafka-connect
    ports:
      - "8088:8088"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: "broker:9092"
      KSQL_HOST_NAME: ksqldb-server
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      KSQL_KSQL_CONNECT_URL: "http://kafka-connect:8083"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'
  control-center:
    image: confluentinc/cp-enterprise-control-center:${KAFKA_VERSION}
    hostname: control-center
    container_name: control-center
    depends_on:
      - broker
      - schema-registry
      - ksqldb-server
      - kafka-connect
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:9092'
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'http://kafka-connect:8083'
      CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://ksqldb-server:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONTROL_CENTER_CONNECT_HEALTHCHECK_ENDPOINT: '/connectors'
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
  pg:
    hostname: pg
    container_name: pg
    image: postgres:14-bullseye
    restart: always
    shm_size: 128mb
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres

  yugabyted-0:
    container_name: yugabyted-0
    hostname: yugabyted-0
    image: yugabytedb/yugabyte:2.20.3.1-b2
    command:
    - sh
    - -c
    - |
      /home/yugabyte/bin/yugabyted start --fault_tolerance=zone --daemon=false --advertise_address=yugabyted-0 --cloud_location=cloud.region.zone1
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    ports:
      - "7000:7000"
      - "7100:7100"
      - "9000:9000"
      - "5433:5433"
      - "15433:15433"
    healthcheck:
      test: ["CMD", "/home/yugabyte/postgres/bin/pg_isready", "-h", "yugabyted-0"]
      interval: 10s
      timeout: 5s
      retries: 10
  cdc-setup:
    container_name: cdc-setup
    hostname: cdc-setup
    image: yugabytedb/yugabyte:2.20.3.1-b2
    depends_on:
      kafka-connect:
        condition: service_started
      pg:
        condition: service_started
      yugabyted-0:
        condition: service_healthy
    environment:
      YB_HOST: yugabyted-0
      YB_USER: yugabyte
      YB_PASSWORD: ""
      YB_DB: demo
      YB_PORT: 5433
      YB_MASTERS: yugabyted-0:7100
      PG_HOST: pg
      PG_USER: postgres
      PG_PASSWORD: postgres
      PG_DB: postgres
      PG_PORT: 5432
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      KAFKA_CONNECT_HOST: kafka-connect
    volumes:
    - ./:/project:ro
    command:
    - bash
    - -c
    - |
        echo -n "Wait for YugabyteDB ($$YB_HOST) to be ready: ."
        until PGPASSWORD=$$YB_PASSWORD /home/yugabyte/postgres/bin/pg_isready -h $$YB_HOST -t 5 -U $$YB_USER -d yugabyte &> /dev/null; do
            echo -n "."
            sleep 5
        done
        echo " Ready!"

        echo -n "Wait for Postgres ($$PG_HOST) to be ready: ."
        until PGPASSWORD=$$PG_PASSWORD /home/yugabyte/postgres/bin/pg_isready -h $$PG_HOST -p $$PG_PORT -t 5 -U $$PG_USER -d $$PG_DB &> /dev/null; do
            echo -n "."
            sleep 5
        done
        echo " Ready!"

        echo "Wait for Kafka Connect / Debezium ($$KAFKA_CONNECT_HOST) to be ready: ."
        until curl -fsSL http://$$KAFKA_CONNECT_HOST:8083/connectors &> /dev/null ; do
            echo -n "."
            sleep 5
        done
        echo " Ready!"

        echo "Prepare source YugabyteDB Cluster"
        echo "YugabyteDB: Create database demo"
        /home/yugabyte/bin/ysqlsh -h $$YB_HOST -c "create database $$YB_DB;"

        echo "YugabyteDB: Create schema in $$YB_DB"
        /home/yugabyte/bin/ysqlsh -h $$YB_HOST -d $$YB_DB -f /project/scripts/schema.sql

        STREAM_ID=$$(/home/yugabyte/bin/yb-admin --master_addresses $$YB_MASTERS create_change_data_stream ysql.demo |  sed 's/CDC Stream ID: //')
        echo Created Stream : $$STREAM_ID

        function create_yb_source(){
          stream_id=$$1; shift
          connector_name=$$1; shift
          table=$$1; shift
          schema_registry_url="http://$$SCHEMA_REGISTRY_HOST_NAME:8081"
          echo "Creating YB Source connector ($$connector_name) for $$table table"
          connector_config='{
            "name": "'$$connector_name'",
            "config": {
              "tasks.max":"2",
              "connector.class": "io.debezium.connector.yugabytedb.YugabyteDBConnector",
              "database.hostname":"'$$YB_HOST'",
              "database.master.addresses":"'$$YB_MASTERS'",
              "database.port":"'$$YB_PORT'",
              "database.user": "'$$YB_USER'",
              "database.password":"'$$YB_PASSWORD'",
              "database.dbname":"'$$YB_DB'",
              "database.server.name":"'$$connector_name'",
              "snapshot.mode":"initial",
              "database.streamid":"'$$stream_id'",
              "table.include.list":"'$$table'",
              "key.converter":"io.confluent.connect.avro.AvroConverter",
              "key.converter.schema.registry.url":"'$$schema_registry_url'",
              "value.converter":"io.confluent.connect.avro.AvroConverter",
              "value.converter.schema.registry.url":"'$$schema_registry_url'"
            }
          }'
          echo "Connector Config:
          $$connector_config"
          curl -sSLkfiX POST \
            -H "Accept:application/json" \
            -H "Content-Type:application/json" \
            $$KAFKA_CONNECT_HOST:8083/connectors/ \
            -d "$$connector_config"
          echo .
        }
        function create_pg_sink(){
          connector_name=$$1; shift
          topics=$$1; shift
          table=$$1; shift
          pg_connection_url="jdbc:postgresql://$$PG_HOST:$$PG_PORT/$$PG_DB?user=$$PG_USER&password=$$PG_PASSWORD&sslMode=require"
          schema_registry_url="http://$$SCHEMA_REGISTRY_HOST_NAME:8081",
          connector_config='{
            "name": "'$$connector_name'",
            "config": {
              "connector.class": "io.confluent.connect.jdbc.JdbcSinkConnector",
              "tasks.max": "1",
                "topics": "'$$topics'",
                "dialect.name": "PostgreSqlDatabaseDialect",
                "table.name.format": "'$$table'",
                "connection.url": "'$$pg_connection_url'",
                "auto.create": "true",
                "auto.evolve":"true",
                "insert.mode": "upsert",
                "pk.fields": "id",
                "pk.mode": "record_key",
                "delete.enabled":"true",
                "transforms": "unwrap",
                "transforms.unwrap.type": "io.debezium.connector.yugabytedb.transforms.YBExtractNewRecordState",
                "transforms.unwrap.drop.tombstones": "false",
                "key.converter":"io.confluent.connect.avro.AvroConverter",
                "key.converter.schema.registry.url":"'$$schema_registry_url'",
                "value.converter":"io.confluent.connect.avro.AvroConverter",
                "value.converter.schema.registry.url":"'$$schema_registry_url'"
            }
          }'
          echo "Connector Config:
          $$connector_config"
          curl -sSLkfiX POST \
            -H "Accept:application/json" \
            -H "Content-Type:application/json" \
            $$KAFKA_CONNECT_HOST:8083/connectors/ \
            -d "$$connector_config"
          echo .
        }
        create_yb_source $$STREAM_ID ybconnector1 'public.orders[a-zA-Z0-9]*'
        sleep 10
        create_yb_source $$STREAM_ID ybconnector2 'public.products'
        sleep 10
        create_yb_source $$STREAM_ID ybconnector3 'public.users'
        sleep 10
        create_yb_source $$STREAM_ID ybconnector4 'public.reviews'
        sleep 10
        create_pg_sink pgconnector1 ybconnector1.public.orders orders
        sleep 10
        create_pg_sink pgconnector2 ybconnector2.public.products products
        sleep 10
        create_pg_sink pgconnector3 ybconnector3.public.users users
        sleep 10
        create_pg_sink pgconnector4 ybconnector4.public.reviews reviews


        echo "Put data in source YB database : PRODUCTS"
        PGPASSWORD=$$YB_PASSWORD /home/yugabyte/bin/ysqlsh -h $$YB_HOST -d $$YB_DB -f /project/scripts/products.sql
        sleep 2

        echo "Put data in source YB database : USERS"
        PGPASSWORD=$$YB_PASSWORD /home/yugabyte/bin/ysqlsh -h $$YB_HOST -d $$YB_DB -f /project/scripts/users.sql
        sleep 2

        echo "Put data in source YB database : REVIEWS"
        PGPASSWORD=$$YB_PASSWORD /home/yugabyte/bin/ysqlsh -h $$YB_HOST -d $$YB_DB -f /project/scripts/reviews.sql
        sleep 2

        echo "Put data in source YB database : ORDERS"
        PGPASSWORD=$$YB_PASSWORD /home/yugabyte/bin/ysqlsh -h $$YB_HOST -d $$YB_DB -f /project/scripts/orders.sql
        sleep 2

        while true;
        do
          echo "Get a record count on source database"
          YB_PRODUCTS=$$(PGPASSWORD=$$YB_PASSWORD /home/yugabyte/bin/ysqlsh -h $$YB_HOST -d $$YB_DB -tqX -c 'select count(id) from products;')
          YB_USERS=$$(PGPASSWORD=$$YB_PASSWORD /home/yugabyte/bin/ysqlsh -h $$YB_HOST -d $$YB_DB -tqX -c 'select count(id) from users;')
          YB_ORDERS=$$(PGPASSWORD=$$YB_PASSWORD /home/yugabyte/bin/ysqlsh -h $$YB_HOST -d $$YB_DB -tqX -c 'select count(id) from orders;')
          YB_REVIEWS=$$(PGPASSWORD=$$YB_PASSWORD /home/yugabyte/bin/ysqlsh -h $$YB_HOST -d $$YB_DB -tqX -c 'select count(id) from reviews;')

          PG_PRODUCTS=$$(PGPASSWORD=$$PG_PASSWORD /home/yugabyte/bin/ysqlsh  -h $$PG_HOST -p $$PG_PORT -U $$PG_USER -d $$PG_DB -tqX -c 'select count(id) from products;' || echo 0)
          PG_USERS=$$(PGPASSWORD=$$PG_PASSWORD /home/yugabyte/bin/ysqlsh  -h $$PG_HOST -p $$PG_PORT -U $$PG_USER -d $$PG_DB -tqX -c 'select count(id) from users;' || echo 0)
          PG_ORDERS=$$(PGPASSWORD=$$PG_PASSWORD /home/yugabyte/bin/ysqlsh  -h $$PG_HOST -p $$PG_PORT -U $$PG_USER -d $$PG_DB -tqX -c 'select count(id) from orders;' || echo 0)
          PG_REVIEWS=$$(PGPASSWORD=$$PG_PASSWORD /home/yugabyte/bin/ysqlsh  -h $$PG_HOST -p $$PG_PORT -U $$PG_USER -d $$PG_DB -tqX -c 'select count(id) from reviews;' || echo 0)
          cat <<EOF
        [Compare Time : $$(date '+%Y-%m-%d %H:%m:%S.%s')]
        -------------------------------------------------
        Record Type  |   YB   :   PG
        -------------|-----------------------------------
        Users        | $$YB_USERS : $$PG_USERS
        Products     | $$YB_PRODUCTS : $$PG_PRODUCTS
        Reviews      | $$YB_REVIEWS : $$PG_REVIEWS
        Orders       | $$YB_ORDERS : $$PG_ORDERS
        -------------------------------------------------
        EOF
          sleep 5
        done
        tail -f /dev/null

volumes:
  zk-data:
  zk-log:
  k-data:
